{"version":3,"file":"static/js/368.410fd0ca.chunk.js","mappings":"+SAEMA,EAAO,6BACPC,EAAM,mCAECC,EAAW,mCAAG,6GAEIC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,yCAAkDC,IAFtD,cAEbG,EAFa,yBAIZA,GAJY,gCAMnBC,QAAQC,MAAR,MANmB,yDAAH,qDAUXC,EAAe,mCAAG,WAAOC,GAAP,gGAEAL,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mCAA4CC,EAA5C,wCAA+EO,IAF/E,cAEjBJ,EAFiB,yBAIhBA,GAJgB,gCAMvBC,QAAQC,MAAR,MANuB,yDAAH,sDAUfG,EAAY,mCAAG,WAAOC,GAAP,gGAEGP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6BU,EAA7B,oBAA2CT,EAA3C,oBAFH,cAEdG,EAFc,yBAIbA,GAJa,gCAMpBC,QAAQC,MAAR,MANoB,yDAAH,sDAUZK,EAAW,mCAAG,WAAOD,GAAP,gGAEIP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6BU,EAA7B,4BAAmDT,EAAnD,oBAFJ,cAEbG,EAFa,yBAIZA,GAJY,gCAMnBC,QAAQC,MAAR,MANmB,yDAAH,sDAUXM,EAAc,mCAAG,WAAOF,GAAP,gGAECP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6BU,EAA7B,4BAAmDT,EAAnD,2BAFD,cAEhBG,EAFgB,yBAIfA,GAJe,gCAMtBC,QAAQC,MAAR,MANsB,yDAAH,qD,gLC1CdO,EAAgBC,EAAAA,EAAAA,IAAH,+FAMbC,GAAaD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,sIAWVG,EAASH,EAAAA,EAAAA,IAAH,uDAMNI,EAAgBJ,EAAAA,EAAAA,IAAH,uEAMbK,EAAaL,EAAAA,EAAAA,GAAH,wCAKVM,EAAWN,EAAAA,EAAAA,KAAH,gFAORO,EAAcP,EAAAA,EAAAA,KAAH,gF,GAMHA,EAAAA,EAAAA,KAAH,2E,QCFlB,EAzCkB,SAAC,GAAyG,IAAD,IAAtGQ,MAASC,KAAQC,EAAqF,EAArFA,MAAOC,EAA8E,EAA9EA,aAAcC,EAAgE,EAAhEA,aAAcC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,YAAiBC,EAAe,EAAfA,SAExG,OACI,UAACjB,EAAD,YACI,4BACI,SAACE,EAAD,CAAYgB,GAAID,EAAhB,sBAEA,SAACb,EAAD,CAAQe,IAAG,yCAAoCH,GAAeI,IAAKT,QAGvE,UAACN,EAAD,YACI,UAACC,EAAD,WAAaK,EAAb,KAAsBC,EAAtB,QACA,oCAAYC,EAAaQ,QAAQ,OACjC,0BACI,SAACd,EAAD,uBACCO,MAGL,SAACN,EAAD,sBACA,wBACKO,EAAOO,KAAI,SAAAC,GAAK,OAAI,wBAAsBA,EAAMC,MAAnBD,EAAMC,KAAnB,WAMpC,ECiBD,EA3CqB,WAAO,IAAD,MACfC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOlB,EAAP,KAAcmB,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWC,OAAOP,GAElBQ,GAAsBC,EAAAA,EAAAA,QAAM,8BAACL,EAASM,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAAzB,QAAgC,WAWlE,OATAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAoBN,GAApB,kFACUnC,EAAAA,EAAAA,IAAamC,GAAUO,MAAK,SAAA/C,GAAQ,OAAIqC,EAASrC,EAAb,IAD9C,2CADY,yBAAC,SAAD,2BAKZgD,CAAKR,EAER,GAAE,CAACA,IAECtB,GAMD,4BACI,SAAC,EAAD,CAAWA,MAAOA,EAAOQ,SAAUgB,EAAoBO,WAEvD,2BACI,yBACI,SAAC,KAAD,CAAMtB,GAAG,OAAT,qBAEJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAIR,SAAC,EAAAuB,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,UAlBD,uCAsBd,C","sources":["components/GetTrending.jsx","components/MovieInfo/MovieInfo.styled.jsx","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst PATH = 'https://api.themoviedb.org'\nconst KEY = 'f496025f6cb0adfa3f9f05b6edf25d52'\n\nexport const GetTranding = async () => {\n    try {\n        const response = await axios.get(`${PATH}/3/trending/movie/day?api_key=${KEY}`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetSearchMovies = async (query) => {\n    try {\n        const response = await axios.get(`${PATH}/3/search/movie?api_key=${KEY}&language=en-US&page=1&query=${query}`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetMovieByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}?api_key=${KEY}&language=en-US`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetCastByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}/credits?api_key=${KEY}&language=en-US`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetReviewsByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n\n","import styled from '@emotion/styled';\nimport { Link } from \"react-router-dom\";\n\nexport const FlexContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\n`;\n\nexport const ButtonBack = styled(Link)`\ndisplay: inline-block;\nmargin-bottom: 7px;\n\ntext-decoration: none;\n\nfont-size: 20px;\n\ncolor: #000000;\n`;\n\nexport const Poster = styled.img`\nwidth: 330px;\nheight: 500px;\n`;\n\n\nexport const InfoContainer = styled.div`\nalign-self: flex-start;\n\nmargin-left: 30px;\n`;\n\nexport const MovieTitle = styled.h2`\nmargin:20px 0;\n`;\n\n\nexport const Overview = styled.span`\ndisplay: flex;\nfont-weight: 700;\nmargin-bottom: 5px;\n`;\n\n\nexport const GenresTitle = styled.span`\ndisplay: flex;\nfont-weight: 700;\nmargin-bottom: 5px;\n`;\n\nexport const Genre = styled.span`\n\n&:not(:last-child){\n    margin-right: 10px;\n}\n`;\n\n\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\n\nimport { FlexContainer, ButtonBack, Poster, MovieTitle, InfoContainer, Overview, GenresTitle } from \"./MovieInfo.styled\";\n\n\nconst MovieInfo = ({ movie: { data: { title, release_date, vote_average, overview, genres, poster_path } }, backLink }) => {\n\n    return (\n        <FlexContainer >\n            <div>\n                <ButtonBack to={backLink}>Go back</ButtonBack>\n\n                <Poster src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} />\n            </div>\n\n            <InfoContainer>\n                <MovieTitle>{title} ({release_date})</MovieTitle>\n                <p>Rating: {vote_average.toFixed(1)}</p>\n                <p>\n                    <Overview>Overview</Overview>\n                    {overview}\n                </p>\n\n                <GenresTitle>Genres</GenresTitle>\n                <ul>\n                    {genres.map(genre => <li key={genre.name}>{genre.name}</li>)}\n                </ul>\n\n            </InfoContainer>\n        </FlexContainer>\n    )\n}\n\nMovieInfo.propTypes = {\n    movie: PropTypes.shape({\n        data: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            release_date: PropTypes.string.isRequired,\n            vote_average: PropTypes.number.isRequired,\n            overview: PropTypes.string.isRequired,\n            genres: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n            poster_path: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nexport default MovieInfo","\nimport { useState, useEffect, useRef, Suspense } from \"react\";\nimport { useParams, Link, Outlet, useLocation } from \"react-router-dom\";\n\nimport { GetMovieByID } from '../components/GetTrending'\nimport MovieInfo from \"components/MovieInfo/MovieInfo\";\n\nconst MovieDetails = () => {\n    const { moviesID } = useParams();\n    const [movie, setMovie] = useState(null)\n    const location = useLocation()\n\n    const moviesId = Number(moviesID)\n\n    const backLinkLocationRef = useRef(location.state?.from ?? '/' ?? '/movies')\n\n    useEffect(() => {\n        async function test(moviesId) {\n            await GetMovieByID(moviesId).then(response => setMovie(response))\n        }\n\n        test(moviesId)\n\n    }, [moviesId])\n\n    if (!movie) {\n        return <div>Loading...</div>;\n    }\n\n\n    return (\n        <div>\n            <MovieInfo movie={movie} backLink={backLinkLocationRef.current} />\n\n            <ul>\n                <li>\n                    <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\">Reviews</Link>\n                </li>\n            </ul>\n\n            <Suspense fallback={<div>Loading...</div>}>\n                <Outlet />\n            </Suspense >\n        </div>\n    )\n}\n\nexport default MovieDetails;"],"names":["PATH","KEY","GetTranding","axios","response","console","error","GetSearchMovies","query","GetMovieByID","id","GetCastByID","GetReviewsByID","FlexContainer","styled","ButtonBack","Link","Poster","InfoContainer","MovieTitle","Overview","GenresTitle","movie","data","title","release_date","vote_average","overview","genres","poster_path","backLink","to","src","alt","toFixed","map","genre","name","moviesID","useParams","useState","setMovie","location","useLocation","moviesId","Number","backLinkLocationRef","useRef","state","from","useEffect","then","test","current","Suspense","fallback"],"sourceRoot":""}