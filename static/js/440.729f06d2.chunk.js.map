{"version":3,"file":"static/js/440.729f06d2.chunk.js","mappings":"yPACaA,EAAOC,EAAAA,EAAAA,GAAH,gJCCJC,EAAOD,EAAAA,EAAAA,GAAH,kEAKJE,EAAOF,EAAAA,EAAAA,EAAH,6CAIJG,EAAQH,EAAAA,EAAAA,IAAH,0DASLI,GAJYJ,EAAAA,EAAAA,IAAH,6CAIIA,EAAAA,EAAAA,KAAH,gE,SCPvB,EAXkB,SAAC,GAA4C,IAA1CK,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC9C,OACI,UAACP,EAAD,YACI,SAACC,EAAD,UAAOG,KACP,SAACF,EAAD,CAAOM,IAAG,yCAAoCD,GAASE,IAAKL,KAC5D,wCAAc,SAACD,EAAD,UAAaG,IAA3B,QACA,mCAAWI,KAAKC,MAAMN,QAGjC,ECOD,EAfkB,SAAC,GAAmB,IAAjBO,EAAgB,EAAhBA,UACjB,OACI,SAACd,EAAD,UACKc,EAAUC,KAAI,gBAAGC,EAAH,EAAGA,GAAIV,EAAP,EAAOA,KAAMC,EAAb,EAAaA,WAAYC,EAAzB,EAAyBA,UAAWS,EAApC,EAAoCA,aAApC,OACX,SAAC,EAAD,CAEIX,KAAMA,EACNC,WAAYA,EACZC,UAAWA,EACXC,MAAOQ,GAJFD,EAFE,KAW1B,ECCD,EAba,WAET,IAAQE,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAYN,GAAUO,MAAK,SAAAC,GAAQ,OAAIJ,EAAUI,EAASC,KAAKC,KAA5B,GACtC,GAAE,CAACV,IAGAG,IAAU,SAAC,EAAD,CAAWP,UAAWO,GAEvC,C,+LCfKQ,EAAO,6BACPC,EAAM,mCAECC,EAAW,mCAAG,6GAEIC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,yCAAkDC,IAFtD,cAEbJ,EAFa,yBAIZA,GAJY,gCAMnBO,QAAQC,MAAR,MANmB,yDAAH,qDAUXC,EAAe,mCAAG,WAAOC,GAAP,gGAEAJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mCAA4CC,EAA5C,wCAA+EM,IAF/E,cAEjBV,EAFiB,yBAIhBA,GAJgB,gCAMvBO,QAAQC,MAAR,MANuB,yDAAH,sDAUfG,EAAY,mCAAG,WAAOrB,GAAP,gGAEGgB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6Bb,EAA7B,oBAA2Cc,EAA3C,oBAFH,cAEdJ,EAFc,yBAIbA,GAJa,gCAMpBO,QAAQC,MAAR,MANoB,yDAAH,sDAUZV,EAAW,mCAAG,WAAOR,GAAP,gGAEIgB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6Bb,EAA7B,4BAAmDc,EAAnD,oBAFJ,cAEbJ,EAFa,yBAIZA,GAJY,gCAMnBO,QAAQC,MAAR,MANmB,yDAAH,sDAUXI,EAAc,mCAAG,WAAOtB,GAAP,gGAECgB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,oBAA6Bb,EAA7B,4BAAmDc,EAAnD,2BAFD,cAEhBJ,EAFgB,yBAIfA,GAJe,gCAMtBO,QAAQC,MAAR,MANsB,yDAAH,qD","sources":["components/ActorList/ActorList.styled.js","components/ActorItem/ActorItem.styled.js","components/ActorItem/ActorItem.jsx","components/ActorList/ActorList.jsx","components/Cast/Cast.jsx","components/GetTrending.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  list-style: none;\n`;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  width: 300px;\n\n  text-align: center;\n`;\nexport const Name = styled.p`\n  font-weight: 500;\n`;\n\nexport const Image = styled.img`\n  width: 80px;\n  height: 120px;\n`;\n\nexport const Character = styled.img`\n  font-weight: 500;\n`;\n\nexport const ActorsRole = styled.span`\n  display: block;\n  margin-top: 3px;\n`;\n","import { Item, Name, Image, ActorsRole } from \"./ActorItem.styled\"\n\nconst ActerItem = ({ name, popularity, character, image }) => {\n    return (\n        <Item>\n            <Name>{name}</Name>\n            <Image src={`https://image.tmdb.org/t/p/w500${image}`} alt={name} />\n            <p>Character: <ActorsRole>{character}</ActorsRole> </p>\n            <p>Rating {Math.round(popularity)}</p>\n        </Item>\n    )\n}\n\nexport default ActerItem","import { List } from './ActorList.styled';\nimport ActerItem from 'components/ActorItem/ActorItem';\n\nconst ActorList = ({ actorsArr }) => {\n    return (\n        <List>\n            {actorsArr.map(({ id, name, popularity, character, profile_path }) => (\n                <ActerItem\n                    key={id}\n                    name={name}\n                    popularity={popularity}\n                    character={character}\n                    image={profile_path}\n                />\n            ))}\n        </List>\n    );\n};\nexport default ActorList;\n","import { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { GetCastByID } from '../GetTrending'\nimport ActorList from 'components/ActorList/ActorList';\n\nconst Cast = () => {\n\n    const { moviesID } = useParams()\n    const [actors, setActors] = useState(null)\n\n    useEffect(() => {\n        GetCastByID(moviesID).then(response => setActors(response.data.cast))\n    }, [moviesID])\n\n    return (\n        actors && <ActorList actorsArr={actors} />\n    )\n}\nexport default Cast","import axios from 'axios';\n\nconst PATH = 'https://api.themoviedb.org'\nconst KEY = 'f496025f6cb0adfa3f9f05b6edf25d52'\n\nexport const GetTranding = async () => {\n    try {\n        const response = await axios.get(`${PATH}/3/trending/movie/day?api_key=${KEY}`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetSearchMovies = async (query) => {\n    try {\n        const response = await axios.get(`${PATH}/3/search/movie?api_key=${KEY}&language=en-US&page=1&query=${query}`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetMovieByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}?api_key=${KEY}&language=en-US`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetCastByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}/credits?api_key=${KEY}&language=en-US`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport const GetReviewsByID = async (id) => {\n    try {\n        const response = await axios.get(`${PATH}/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`);\n        // console.log(response);\n        return response\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n\n"],"names":["List","styled","Item","Name","Image","ActorsRole","name","popularity","character","image","src","alt","Math","round","actorsArr","map","id","profile_path","moviesID","useParams","useState","actors","setActors","useEffect","GetCastByID","then","response","data","cast","PATH","KEY","GetTranding","axios","console","error","GetSearchMovies","query","GetMovieByID","GetReviewsByID"],"sourceRoot":""}